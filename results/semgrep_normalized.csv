id,tool,rule_id,vulnerability_id,package,installed_version,message,severity,file,start_line,cwe,raw
,semgrep,php.lang.security.phpinfo-use.phpinfo-use,,,,The 'phpinfo' function may reveal sensitive information about your environment.,warning,/home/vboxuser/Diplomas/dvwa-src/phpinfo.php,8,CWE-200: Exposure of Sensitive Information to an Unauthorized Actor,"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/phpinfo.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 11, ""endLine"": 8, ""snippet"": {""text"": ""phpinfo();""}, ""startColumn"": 1, ""startLine"": 8}}}], ""message"": {""text"": ""The 'phpinfo' function may reveal sensitive information about your environment.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.phpinfo-use.phpinfo-use""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/api/src/HealthController.php,88,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/api/src/HealthController.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 52, ""endLine"": 88, ""snippet"": {""text"": ""\t\t\texec (\""ping -c 4 \"" . $target, $output, $ret_var);""}, ""startColumn"": 4, ""startLine"": 88}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-sql-string.tainted-sql-string,,,,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library.",warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/brute/source/low.php,12,CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/brute/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 80, ""endLine"": 12, ""snippet"": {""text"": ""\t$query  = \""SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\"";""}, ""startColumn"": 12, ""startLine"": 12}}}], ""message"": {""text"": ""User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\""INSERT INTO test(id, label) VALUES (?, ?)\"");`) or a safe library.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-sql-string.tainted-sql-string""}"
,semgrep,php.lang.security.injection.echoed-request.echoed-request,,,,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/csp/source/jsonp.php,12,CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/csp/source/jsonp.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 45, ""endLine"": 12, ""snippet"": {""text"": ""echo $callback . \""(\"".json_encode($outp).\"")\"";""}, ""startColumn"": 1, ""startLine"": 12}}}], ""message"": {""text"": ""`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.echoed-request.echoed-request""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/high.php,26,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/high.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 42, ""endLine"": 26, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  ' . $target );""}, ""startColumn"": 10, ""startLine"": 26}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.tainted-exec.tainted-exec,,,,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/high.php,26,CWE-94: Improper Control of Generation of Code ('Code Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/high.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 42, ""endLine"": 26, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  ' . $target );""}, ""startColumn"": 10, ""startLine"": 26}}}], ""message"": {""text"": ""Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/high.php,30,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/high.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 47, ""endLine"": 30, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );""}, ""startColumn"": 10, ""startLine"": 30}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.tainted-exec.tainted-exec,,,,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/high.php,30,CWE-94: Improper Control of Generation of Code ('Code Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/high.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 47, ""endLine"": 30, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );""}, ""startColumn"": 10, ""startLine"": 30}}}], ""message"": {""text"": ""Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/impossible.php,22,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/impossible.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 43, ""endLine"": 22, ""snippet"": {""text"": ""\t\t\t$cmd = shell_exec( 'ping  ' . $target );""}, ""startColumn"": 11, ""startLine"": 22}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.tainted-exec.tainted-exec,,,,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/impossible.php,22,CWE-94: Improper Control of Generation of Code ('Code Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/impossible.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 43, ""endLine"": 22, ""snippet"": {""text"": ""\t\t\t$cmd = shell_exec( 'ping  ' . $target );""}, ""startColumn"": 11, ""startLine"": 22}}}], ""message"": {""text"": ""Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/impossible.php,26,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/impossible.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 48, ""endLine"": 26, ""snippet"": {""text"": ""\t\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );""}, ""startColumn"": 11, ""startLine"": 26}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.tainted-exec.tainted-exec,,,,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/impossible.php,26,CWE-94: Improper Control of Generation of Code ('Code Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/impossible.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 48, ""endLine"": 26, ""snippet"": {""text"": ""\t\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );""}, ""startColumn"": 11, ""startLine"": 26}}}], ""message"": {""text"": ""Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/low.php,10,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 42, ""endLine"": 10, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  ' . $target );""}, ""startColumn"": 10, ""startLine"": 10}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.tainted-exec.tainted-exec,,,,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/low.php,10,CWE-94: Improper Control of Generation of Code ('Code Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 42, ""endLine"": 10, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  ' . $target );""}, ""startColumn"": 10, ""startLine"": 10}}}], ""message"": {""text"": ""Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/low.php,14,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 47, ""endLine"": 14, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );""}, ""startColumn"": 10, ""startLine"": 14}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.tainted-exec.tainted-exec,,,,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/low.php,14,CWE-94: Improper Control of Generation of Code ('Code Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 47, ""endLine"": 14, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );""}, ""startColumn"": 10, ""startLine"": 14}}}], ""message"": {""text"": ""Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/medium.php,19,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/medium.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 42, ""endLine"": 19, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  ' . $target );""}, ""startColumn"": 10, ""startLine"": 19}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.tainted-exec.tainted-exec,,,,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/medium.php,19,CWE-94: Improper Control of Generation of Code ('Code Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/medium.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 42, ""endLine"": 19, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  ' . $target );""}, ""startColumn"": 10, ""startLine"": 19}}}], ""message"": {""text"": ""Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-exec.tainted-exec,,,,User input is passed to a function that executes a shell command. This can lead to remote code execution.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/medium.php,23,CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/medium.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 47, ""endLine"": 23, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );""}, ""startColumn"": 10, ""startLine"": 23}}}], ""message"": {""text"": ""User input is passed to a function that executes a shell command. This can lead to remote code execution.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.tainted-exec.tainted-exec,,,,Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/medium.php,23,CWE-94: Improper Control of Generation of Code ('Code Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/exec/source/medium.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 47, ""endLine"": 23, ""snippet"": {""text"": ""\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );""}, ""startColumn"": 10, ""startLine"": 23}}}], ""message"": {""text"": ""Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.tainted-exec.tainted-exec""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/fi/source/high.php,7,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/fi/source/high.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 29, ""endLine"": 7, ""snippet"": {""text"": ""if( !fnmatch( \""file*\"", $file ) && $file != \""include.php\"" ) {""}, ""startColumn"": 24, ""startLine"": 7}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-sql-string.tainted-sql-string,,,,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library.",warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli/source/low.php,10,CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 78, ""endLine"": 10, ""snippet"": {""text"": ""\t\t\t$query  = \""SELECT first_name, last_name FROM users WHERE user_id = '$id';\"";""}, ""startColumn"": 14, ""startLine"": 10}}}], ""message"": {""text"": ""User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\""INSERT INTO test(id, label) VALUES (?, ?)\"");`) or a safe library.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-sql-string.tainted-sql-string""}"
,semgrep,php.lang.security.injection.tainted-sql-string.tainted-sql-string,,,,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library.",warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli/source/low.php,31,CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 78, ""endLine"": 31, ""snippet"": {""text"": ""\t\t\t$query  = \""SELECT first_name, last_name FROM users WHERE user_id = '$id';\"";""}, ""startColumn"": 14, ""startLine"": 31}}}], ""message"": {""text"": ""User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\""INSERT INTO test(id, label) VALUES (?, ?)\"");`) or a safe library.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-sql-string.tainted-sql-string""}"
,semgrep,php.lang.security.injection.tainted-sql-string.tainted-sql-string,,,,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library.",warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/high.php,11,CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/high.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 86, ""endLine"": 11, ""snippet"": {""text"": ""\t\t\t$query  = \""SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;\"";""}, ""startColumn"": 14, ""startLine"": 11}}}], ""message"": {""text"": ""User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\""INSERT INTO test(id, label) VALUES (?, ?)\"");`) or a safe library.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-sql-string.tainted-sql-string""}"
,semgrep,php.lang.security.injection.tainted-sql-string.tainted-sql-string,,,,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library.",warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/high.php,33,CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/high.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 86, ""endLine"": 33, ""snippet"": {""text"": ""\t\t\t$query  = \""SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;\"";""}, ""startColumn"": 14, ""startLine"": 33}}}], ""message"": {""text"": ""User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\""INSERT INTO test(id, label) VALUES (?, ?)\"");`) or a safe library.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-sql-string.tainted-sql-string""}"
,semgrep,php.lang.security.injection.tainted-sql-string.tainted-sql-string,,,,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library.",warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/low.php,11,CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 78, ""endLine"": 11, ""snippet"": {""text"": ""\t\t\t$query  = \""SELECT first_name, last_name FROM users WHERE user_id = '$id';\"";""}, ""startColumn"": 14, ""startLine"": 11}}}], ""message"": {""text"": ""User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\""INSERT INTO test(id, label) VALUES (?, ?)\"");`) or a safe library.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-sql-string.tainted-sql-string""}"
,semgrep,php.lang.security.injection.tainted-sql-string.tainted-sql-string,,,,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library.",warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/low.php,32,CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/low.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 78, ""endLine"": 32, ""snippet"": {""text"": ""\t\t\t$query  = \""SELECT first_name, last_name FROM users WHERE user_id = '$id';\"";""}, ""startColumn"": 14, ""startLine"": 32}}}], ""message"": {""text"": ""User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\""INSERT INTO test(id, label) VALUES (?, ?)\"");`) or a safe library.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-sql-string.tainted-sql-string""}"
,semgrep,php.lang.security.injection.tainted-sql-string.tainted-sql-string,,,,"User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(""INSERT INTO test(id, label) VALUES (?, ?)"");`) or a safe library.",warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/medium.php,34,CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/sqli_blind/source/medium.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 76, ""endLine"": 34, ""snippet"": {""text"": ""\t\t\t$query  = \""SELECT first_name, last_name FROM users WHERE user_id = $id;\"";""}, ""startColumn"": 14, ""startLine"": 34}}}], ""message"": {""text"": ""User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\""INSERT INTO test(id, label) VALUES (?, ?)\"");`) or a safe library.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-sql-string.tainted-sql-string""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_help.php,20,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_help.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 96, ""endLine"": 20, ""snippet"": {""text"": ""\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \""vulnerabilities/{$id}/help/help.php\"" ) . '<?php ' );""}, ""startColumn"": 35, ""startLine"": 20}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_help.php,22,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_help.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 106, ""endLine"": 22, ""snippet"": {""text"": ""\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \""vulnerabilities/{$id}/help/help.{$locale}.php\"" ) . '<?php ' );""}, ""startColumn"": 35, ""startLine"": 22}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source.php,60,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 102, ""endLine"": 60, ""snippet"": {""text"": ""\t$source = @file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \""vulnerabilities/{$id}/source/{$security}.php\"" );""}, ""startColumn"": 32, ""startLine"": 60}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source.php,64,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 88, ""endLine"": 64, ""snippet"": {""text"": ""\tif (file_exists (DVWA_WEB_PAGE_TO_ROOT . \""vulnerabilities/{$id}/source/{$security}.js\"")) {""}, ""startColumn"": 19, ""startLine"": 64}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source.php,65,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 105, ""endLine"": 65, ""snippet"": {""text"": ""\t\t$js_source = @file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \""vulnerabilities/{$id}/source/{$security}.js\"" );""}, ""startColumn"": 36, ""startLine"": 65}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source_all.php,14,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source_all.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 55, ""endLine"": 14, ""snippet"": {""text"": ""\t$lowsrc = @file_get_contents(\""./{$id}/source/low.php\"");""}, ""startColumn"": 31, ""startLine"": 14}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source_all.php,18,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source_all.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 58, ""endLine"": 18, ""snippet"": {""text"": ""\t$medsrc = @file_get_contents(\""./{$id}/source/medium.php\"");""}, ""startColumn"": 31, ""startLine"": 18}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source_all.php,22,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source_all.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 57, ""endLine"": 22, ""snippet"": {""text"": ""\t$highsrc = @file_get_contents(\""./{$id}/source/high.php\"");""}, ""startColumn"": 32, ""startLine"": 22}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
,semgrep,php.lang.security.injection.tainted-filename.tainted-filename,,,,File name based on user input risks server-side request forgery.,warning,/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source_all.php,26,CWE-918: Server-Side Request Forgery (SSRF),"{""fingerprints"": {""matchBasedId/v1"": ""requires login""}, ""locations"": [{""physicalLocation"": {""artifactLocation"": {""uri"": ""/home/vboxuser/Diplomas/dvwa-src/vulnerabilities/view_source_all.php"", ""uriBaseId"": ""%SRCROOT%""}, ""region"": {""endColumn"": 62, ""endLine"": 26, ""snippet"": {""text"": ""\t$impsrc = @file_get_contents(\""./{$id}/source/impossible.php\"");""}, ""startColumn"": 31, ""startLine"": 26}}}], ""message"": {""text"": ""File name based on user input risks server-side request forgery.""}, ""properties"": {}, ""ruleId"": ""php.lang.security.injection.tainted-filename.tainted-filename""}"
